//go:build functional || openapi || rde || ALL

/*
 * Copyright 2023 VMware, Inc.  All rights reserved.  Licensed under the Apache v2 License.
 */

package govcd

import (
	"fmt"
	"github.com/vmware/go-vcloud-director/v2/types/v56"
	. "gopkg.in/check.v1"
	"strings"
)

// Test_DefinedInterfaceBehavior tests the CRUD methods of Defined Interfaces to create Behaviors, as a System administrator and tenant user.
// This test can be run with GOVCD_SKIP_VAPP_CREATION option enabled.
func (vcd *TestVCD) Test_DefinedInterfaceBehavior(check *C) {
	if vcd.skipAdminTests {
		check.Skip(fmt.Sprintf(TestRequiresSysAdminPrivileges, check.TestName()))
	}
	skipOpenApiEndpointTest(vcd, check, types.OpenApiPathVersion1_0_0+types.OpenApiEndpointRdeInterfaceBehaviors)

	sanizitedTestName := strings.NewReplacer("_", "", ".", "").Replace(check.TestName())
	di, err := vcd.client.CreateDefinedInterface(&types.DefinedInterface{
		Name:    sanizitedTestName,
		Nss:     "nss",
		Version: "1.0.0",
		Vendor:  "vmware",
	})
	check.Assert(err, IsNil)
	AddToCleanupListOpenApi(di.DefinedInterface.ID, check.TestName(), types.OpenApiPathVersion1_0_0+types.OpenApiEndpointRdeInterfaces+di.DefinedInterface.ID)

	behaviorPayload := types.Behavior{
		Name:        sanizitedTestName,
		Description: "Generated by" + check.TestName(),
		Execution: map[string]interface{}{
			"id":   "TestActivity",
			"type": "Activity",
		},
	}
	behavior, err := di.AddBehavior(behaviorPayload)
	check.Assert(err, IsNil)
	AddToCleanupListOpenApi(behavior.Behavior.ID, check.TestName(), types.OpenApiPathVersion1_0_0+fmt.Sprintf(types.OpenApiEndpointRdeInterfaceBehaviors, di.DefinedInterface.ID)+behavior.Behavior.ID)
	check.Assert(behavior.Behavior.Name, Equals, behaviorPayload.Name)
	check.Assert(behavior.Behavior.Description, Equals, behaviorPayload.Description)
	check.Assert(behavior.Behavior.Ref, Equals, fmt.Sprintf("urn:vcloud:behavior-interface:%s:%s:%s:%s", behaviorPayload.Name, di.DefinedInterface.Vendor, di.DefinedInterface.Nss, di.DefinedInterface.Version))
	check.Assert(behavior.Behavior.ID, Equals, behavior.Behavior.Ref)

	err = di.DeleteBehavior(behavior.Behavior.ID)
	check.Assert(err, IsNil)
}
