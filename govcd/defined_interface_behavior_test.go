//go:build functional || openapi || rde || ALL

/*
 * Copyright 2023 VMware, Inc.  All rights reserved.  Licensed under the Apache v2 License.
 */

package govcd

import (
	"fmt"
	"github.com/vmware/go-vcloud-director/v2/types/v56"
	. "gopkg.in/check.v1"
	"strings"
)

// Test_DefinedInterfaceBehavior tests the CRUD methods of Defined Interfaces to create Behaviors, as a System administrator and tenant user.
// This test can be run with GOVCD_SKIP_VAPP_CREATION option enabled.
func (vcd *TestVCD) Test_DefinedInterfaceBehavior(check *C) {
	if vcd.skipAdminTests {
		check.Skip(fmt.Sprintf(TestRequiresSysAdminPrivileges, check.TestName()))
	}
	skipOpenApiEndpointTest(vcd, check, types.OpenApiPathVersion1_0_0+types.OpenApiEndpointRdeInterfaceBehaviors)

	// Create a new Defined Interface with dummy values, so we can test behaviors on it
	sanizitedTestName := strings.NewReplacer("_", "", ".", "").Replace(check.TestName())
	di, err := vcd.client.CreateDefinedInterface(&types.DefinedInterface{
		Name:    sanizitedTestName,
		Nss:     "nss",
		Version: "1.0.0",
		Vendor:  "vmware",
	})
	check.Assert(err, IsNil)
	AddToCleanupListOpenApi(di.DefinedInterface.ID, check.TestName(), types.OpenApiPathVersion1_0_0+types.OpenApiEndpointRdeInterfaces+di.DefinedInterface.ID)

	// Create a new Behavior payload with an Activity type.
	behaviorPayload := types.Behavior{
		Name:        sanizitedTestName,
		Description: "Generated by " + check.TestName(),
		Execution: map[string]interface{}{
			"id":   "TestActivity",
			"type": "Activity",
		},
	}
	behavior, err := di.AddBehavior(behaviorPayload)
	check.Assert(err, IsNil)
	AddToCleanupListOpenApi(behavior.ID, check.TestName(), types.OpenApiPathVersion1_0_0+fmt.Sprintf(types.OpenApiEndpointRdeInterfaceBehaviors, di.DefinedInterface.ID)+behavior.ID)
	check.Assert(behavior.Name, Equals, behaviorPayload.Name)
	check.Assert(behavior.Description, Equals, behaviorPayload.Description)
	check.Assert(behavior.Ref, Equals, fmt.Sprintf("urn:vcloud:behavior-interface:%s:%s:%s:%s", behaviorPayload.Name, di.DefinedInterface.Vendor, di.DefinedInterface.Nss, di.DefinedInterface.Version))
	check.Assert(behavior.ID, Equals, behavior.Ref)

	// We check that the Behaviors can be retrieved
	allBehaviors, err := di.GetAllBehaviors(nil)
	check.Assert(err, IsNil)
	check.Assert(1, Equals, len(allBehaviors))
	check.Assert(allBehaviors[0], DeepEquals, behavior)

	// Error getting non-existing Behaviors
	_, err = di.GetBehaviorById("urn:vcloud:behavior-interface:notexist:notexist:notexist:9.9.9")
	check.Assert(err, NotNil)
	check.Assert(strings.Contains(err.Error(), ErrorEntityNotFound.Error()), Equals, true)

	_, err = di.GetBehaviorByName("DoesNotExist")
	check.Assert(err, NotNil)
	check.Assert(strings.Contains(err.Error(), ErrorEntityNotFound.Error()), Equals, true)

	// Getting behaviors correctly
	retrievedBehavior, err := di.GetBehaviorById(behavior.ID)
	check.Assert(err, IsNil)
	check.Assert(retrievedBehavior, NotNil)
	check.Assert(retrievedBehavior.Name, Equals, behavior.Name)
	check.Assert(retrievedBehavior.Description, Equals, behavior.Description)
	check.Assert(retrievedBehavior.Execution, DeepEquals, behavior.Execution)

	retrievedBehavior2, err := di.GetBehaviorByName(behavior.Name)
	check.Assert(err, IsNil)
	check.Assert(retrievedBehavior, NotNil)
	check.Assert(retrievedBehavior, DeepEquals, retrievedBehavior2)

	updatePayload := types.Behavior{
		Description: "Updated description",
		Execution: map[string]interface{}{
			"id":   "TestActivityUpdated",
			"type": "Activity",
		},
		Ref:  "notGoingToUpdate1",
		Name: "notGoingToUpdate2",
	}
	_, err = di.UpdateBehavior(updatePayload)
	check.Assert(err, NotNil)
	check.Assert(err.Error(), Equals, "ID of the Behavior to update is empty")

	updatePayload.ID = retrievedBehavior.ID
	updatedBehavior, err := di.UpdateBehavior(updatePayload)
	check.Assert(err, IsNil)
	check.Assert(updatedBehavior.ID, Equals, retrievedBehavior.ID)
	check.Assert(updatedBehavior.Ref, Equals, retrievedBehavior.Ref)   // This cannot be updated
	check.Assert(updatedBehavior.Name, Equals, retrievedBehavior.Name) // This cannot be updated
	check.Assert(updatedBehavior.Execution, DeepEquals, updatePayload.Execution)
	check.Assert(updatedBehavior.Description, Equals, updatePayload.Description)

	err = di.DeleteBehavior(behavior.ID)
	check.Assert(err, IsNil)
}

// Test_RdeTypeBehavior tests the CRUD methods of RDE Types to create Behaviors, as a System administrator and tenant user.
// This test can be run with GOVCD_SKIP_VAPP_CREATION option enabled.
func (vcd *TestVCD) Test_RdeTypeBehavior(check *C) {
	if vcd.skipAdminTests {
		check.Skip(fmt.Sprintf(TestRequiresSysAdminPrivileges, check.TestName()))
	}
	skipOpenApiEndpointTest(vcd, check, types.OpenApiPathVersion1_0_0+types.OpenApiEndpointRdeTypeBehaviors)

	unmarshaledRdeTypeSchema, err := loadRdeTypeSchemaFromTestResources()
	check.Assert(err, IsNil)
	check.Assert(true, Equals, len(unmarshaledRdeTypeSchema) > 0)

	sanizitedTestName := strings.NewReplacer("_", "", ".", "").Replace(check.TestName())
	rdeType, err := vcd.client.CreateRdeType(&types.DefinedEntityType{
		Name:        sanizitedTestName,
		Description: "Created by " + check.TestName(),
		Nss:         "nss",
		Version:     "1.0.0",
		Vendor:      "vmware",
		Schema:      unmarshaledRdeTypeSchema,
		Interfaces:  []string{"urn:vcloud:interface:vmware:k8s:1.0.0"},
	})
	check.Assert(err, IsNil)
	AddToCleanupListOpenApi(rdeType.DefinedEntityType.ID, check.TestName(), types.OpenApiPathVersion1_0_0+types.OpenApiEndpointRdeEntityTypes+rdeType.DefinedEntityType.ID)

	allBehaviors, err := rdeType.GetAllBehaviors(nil)
	check.Assert(err, IsNil)
	check.Assert(len(allBehaviors), Equals, 1)
	check.Assert(allBehaviors[0].Name, Equals, "createKubeConfig")
	check.Assert(len(allBehaviors[0].Execution), Equals, 2)
	check.Assert(allBehaviors[0].Execution["id"], Equals, "CreateKubeConfigActivity")
	check.Assert(allBehaviors[0].Execution["type"], Equals, "Activity")

	allAccCtrl, err := rdeType.GetAllBehaviorsAccessControls(nil)
	check.Assert(err, IsNil)
	check.Assert(len(allAccCtrl), Equals, 0)

	// TODO: Test rdeType.AddBehaviorAccessControl()

	err = rdeType.Delete()
	check.Assert(err, IsNil)
}
